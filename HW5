from asyncore import read
import json
import pandas as pd
import numpy as np
import scipy as sp
from typing import Union
from typing import Tuple
from matplotlib import pyplot as mpl
import pathlib
import pytest

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        """
        Initialize a questionnare analysis
        """
        self.data_fname=data_fname

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        with open(self.data_fname,'r') as file:
            self.data=json.load(file)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
        """
        bins=[0,10,20,30,40,50,60,70,80,90,99]
        lent=len(self.data)
        ages=list()
        for n in range(lent):
            if not self.data[n].get('age')=='nan':
                ages.append(int(self.data[n].get('age')))

        mpl.figure()
        histogram=mpl.hist(ages, bins)
        mpl.show()
        return histogram
    
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
            A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
            the (ordinal) index after a reset.
        """
        cor_df=pd.DataFrame()
        lent=len(self.data)
        for n in range(lent):
            email=self.data[n].get('email')
            email_last_idx=len(email)-1
            if not email.find('@')==-1 and not email.find('@')==0 and not email.find('@')==email_last_idx:
                if email.find('@')==email.rfind('@'):
                    if not email.find('.')==-1 and not email.find('.')==0 and not email.find('.')==email_last_idx:
                        if email.find('@.')==-1:
                            
                            cor_df[n]=self.data[n].values()
        return cor_df

        
QA=QuestionnaireAnalysis('data.json')
QA.read_data()
q=QA.show_age_distrib()

def test_email_validatiHW5on():
    truth = pd.read_csv('tests_data/q2_email.csv')
    fname = 'data.json'
    q = QuestionnaireAnalysis(fname)
    q.read_data()
    corrected = q.remove_rows_without_mail()
    assert truth["email"].equals(corrected["email"])


