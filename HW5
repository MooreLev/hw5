from asyncore import read
from itertools import count
import json
import pandas as pd
import numpy as np
import scipy as sp
from typing import Union
from typing import Tuple
from matplotlib import pyplot as mpl
import pathlib
import pytest

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        """
        Initialize a questionnare analysis
        """
        self.data_fname=data_fname

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        with open(self.data_fname,'r') as file:
            self.data=json.load(file)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
        """
        bins=[0,10,20,30,40,50,60,70,80,90,99]
        lent=len(self.data)
        ages=list()
        for n in range(lent):
            age=self.data[n].get('age')
            if isinstance(age,int):
                ages.append(age)

        mpl.figure()
        histogram=mpl.hist(ages, bins)
        mpl.show()
        return histogram
    
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
            A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
            the (ordinal) index after a reset.
        """
        cor_df=pd.DataFrame()
        lent=len(self.data)
        for n in range(lent):
            email=self.data[n].get('email')
            email_last_idx=len(email)-1
            if not email.find('@')==-1 and not email.find('@')==0 and not email.find('@')==email_last_idx:
                if email.find('@')==email.rfind('@'):
                    if not email.find('.')==-1 and not email.find('.')==0 and not email.find('.')==email_last_idx:
                        if email.find('@.')==-1:
                            
                            cor_df[n]=self.data[n].values()
        return cor_df

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
            The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
        """
        arr=pd.DataFrame()
        
        lent=len(self.data)
        for n in range(lent):
            cor_flag=False
            q1=float(self.data[n].get('q1'))
            q2=float(self.data[n].get('q2'))
            q3=float(self.data[n].get('q3'))
            q4=float(self.data[n].get('q4'))
            q5=float(self.data[n].get('q5'))
            meanq=np.nanmean([q1,q2,q3,q4,q5])
            if np.isnan(q1):
                cor_flag=True
                self.data[n]["q1"]=meanq
            if np.isnan(q2):
                cor_flag=True
                self.data[n]["q2"]=meanq
            if np.isnan(q3):
                cor_flag=True
                self.data[n]["q3"]=meanq
            if np.isnan(q4):
                cor_flag=True
                self.data[n]["q4"]=meanq
            if np.isnan(q5):
                cor_flag=True
                self.data[n]["q5"]=meanq
            if cor_flag==True:
                arr[n]=n

        return [pd.DataFrame(self.data),arr]

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """

        lent=len(self.data)
        for n in range(lent):
            q1=float(self.data[n].get('q1'))
            q2=float(self.data[n].get('q2'))
            q3=float(self.data[n].get('q3'))
            q4=float(self.data[n].get('q4'))
            q5=float(self.data[n].get('q5'))
            q_list=[q1,q2,q3,q4,q5]
            num_nan=q_list.count("nan")
            if num_nan<maximal_nans_per_sub:
                self.data[n]["score"]=np.nanmean([q1,q2,q3,q4,q5])
            else:
                self.data[n]["score"]=pd.NA
        
        return pd.DataFrame(self.data)


        
QA=QuestionnaireAnalysis('data.json')
QA.read_data()
"""df=QA.score_subjects()"""
df, _=QA.fill_na_with_mean()
print(df)
def test_score_dtype():
    fname = 'data.json'
    q = QuestionnaireAnalysis(fname)
    q.read_data()
    df = q.score_subjects()
    assert isinstance(df["score"].dtype, pd.UInt8Dtype)


def test_score_results():
    truth = pd.read_csv('tests_data/q4_score.csv', squeeze=True, index_col=0).astype("UInt8")
    fname = 'data.json'
    q = QuestionnaireAnalysis(fname)
    q.read_data()
    df = q.score_subjects()
    assert df["score"].equals(truth)

def test_fillna_rows():
    truth = np.load('tests_data/q3_fillna.npy')
    fname = 'data.json'
    q = QuestionnaireAnalysis(fname)
    q.read_data()
    _, rows = q.fill_na_with_mean()
    assert np.array_equal(truth, rows)
    

def test_fillna_df():
    truth = pd.read_csv('tests_data/q3_fillna.csv')
    fname = 'data.json'
    q = QuestionnaireAnalysis(fname)
    q.read_data()
    df, _ = q.fill_na_with_mean()
    df.equals(truth)
